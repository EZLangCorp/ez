from ez.lib import state

// this is a comment
// intractive implies will have visualization of the process
// will have a message written to user every time meomory is allocated
// or deallocated


interactive func main (String arg1, int arg2) returns int
{
    lock String PRIORITY = 'WARNING'
    global int t = 4
    int a, b = 2,5
    int c = (a + b)
    String k = build String("hello")
    character t = build Empty() 
    int c = 0
    Integer d = build Integer(5)
    Integer e = build Integer(Empty)

    // in interactive mode should show that you are allocating more memory and can now have more functions you can use on c
    c.explain()
    state.describe()
    // explains the type and functions associated with it 
    t = 'b'
    k.toList()
    k.typeCast(to=int) //Raises error - certain characters within k are not integers
    k.typeCast(to=ascii) // Works by converting characters to ascii values and adding them up
    t.typeCast(to=ascii) // converts straight to ascii
    k.show() // display
    show(k,t) 
    log(k, priority='WARNING')
    output = doSomething(2) -> doSomething2 -> doSomething3
    return SUCCESS

}

func doSomething(int a) return int
{
    List[int] lst = [1,2,3,4,5]
    List[int] lst = build List([1,2,3,4,5])
    lst.min() -> show()
    lst.max().show()
    lst.mean().show()
    lst.std().show()
    List[int] lst = apply(int x, x.show(), lst, returns=int)
    // sets lst to [0] throught automatic type castings
    apply(int x, x.show() if x == 2, lst, returns=None)
    apply(int x, x-1, lst, mutate=false) -> show()  
    // lostValueWarning: [0,1,2,3,4] was not stored or shown
    apply(int x, x-1, lst, mutate=true) 
    return 3
}

func doSomething2(int a) return int
{
    return 1
}

func doSomething3(int a) return int
{
    return 2
}
